scalar DateTime

type Query {
  feed(filter: String, skip: Int, first: Int, orderBy: ProjectOrderByInput): [Project]!
}

enum ProjectOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

# type Feed {
#   links: [Link!]!
#   count: Int!
# }

type Mutation {
  post(name: String!, description: String!): Project!
  signup(studentId: String!, password: String!, name: String!): AuthPayload
  login(studentId: String!, password: String!): AuthPayload
#   vote(linkId: ID!): Vote!
}

type AuthPayload {
  token: String
  user: User
}

type Project {
  id: ID!
  createdAt: DateTime!
  description: String!
  name: String!
  addBy: User
}

type User {
  id: ID!
  name: String!
  studentId: String!
  password: String!
  projects: [Project!]!
}